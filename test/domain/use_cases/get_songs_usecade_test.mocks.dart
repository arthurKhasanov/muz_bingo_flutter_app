// Mocks generated by Mockito 5.4.5 from annotations
// in muz_bingo_app/test/domain/use_cases/get_songs_usecade_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:muz_bingo_app/core/enums/fetch_songs_mode.dart' as _i7;
import 'package:muz_bingo_app/core/error/failure.dart' as _i5;
import 'package:muz_bingo_app/domain/entity/song_entity.dart' as _i6;
import 'package:muz_bingo_app/domain/repository/songs_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ISongRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockISongRepository extends _i1.Mock implements _i3.ISongRepository {
  MockISongRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.SongEntity>>> getSongs(
          _i7.FetchSongsMode? fetchMode) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSongs,
          [fetchMode],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.SongEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.SongEntity>>(
          this,
          Invocation.method(
            #getSongs,
            [fetchMode],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.SongEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.SongEntity>> saveSong(
          _i6.SongEntity? song) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSong,
          [song],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.SongEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.SongEntity>(
          this,
          Invocation.method(
            #saveSong,
            [song],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.SongEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateSong(_i6.SongEntity? song) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSong,
          [song],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #updateSong,
            [song],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteSong(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteSong,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deleteSong,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> toggleSelection(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleSelection,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #toggleSelection,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
